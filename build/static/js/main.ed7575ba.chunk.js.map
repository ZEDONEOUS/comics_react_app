{"version":3,"sources":["containers/Header/Header.style.js","containers/Header/index.js","containers/Content/Content.style.js","containers/Content/index.js","containers/Footer/Footer.style.js","containers/Footer/index.js","containers/App/App.style.js","containers/App/index.js","serviceWorker.js","index.js"],"names":["Head","styled","Row","_templateObject","Header","react_default","a","createElement","Component","Comic","Content_style_templateObject","ComicTitle","h1","_templateObject2","ComicImage","img","_templateObject3","NewComic","div","_templateObject4","Content","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rating","comic_data","changeRating","bind","assertThisInitialized","getComic","_this2","number","Math","floor","random","setState","fetch","crossDomain","type","then","response","json","data","newRating","name","lib","md","src","title","build_default","starRatedColor","numberOfStars","onClick","FooterCredits","Footer_style_templateObject","Footer","GlobalStyle","createGlobalStyle","App_style_templateObject","App","fluid","containers_Header","containers_Content","containers_Footer","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ed7575ba.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Row } from 'react-flexbox-grid';\n\nexport const Head = styled(Row)`\n    background:#9ccc65;\n    padding:0 2em;\n    margin-bottom:1em;\n\n    & > h1{\n        font-size:2.3em;\n    }\n`;\n\n","import React, { Component } from 'react';\n\nimport {\n    Head\n} from './Header.style';\n\nclass Header extends Component{\n    render(){\n        return(\n            <div>\n                <Head>\n                    <h1> Comics valoration </h1>\n                </Head>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import styled from 'styled-components';\nimport { Row } from 'react-flexbox-grid';\n\nexport const Comic = styled(Row)`\n    text-align:center;\n    width:70%;\n    padding:2em 5em;\n    display:block;\n    margin:0 auto;\n`;\n\nexport const ComicTitle = styled.h1`\n    font-weight:bold;\n    margin-bottom:1em;\n    display:inline-block;\n    border-bottom:3px solid #000;\n`;\n\nexport const ComicImage = styled.img`\n    width:auto;\n    display:block;\n    margin:0 auto;\n    max-width:100%;\n`;\n\nexport const NewComic = styled.div`\n    border-top:1px solid #000;\n    margin-top:30px;\n\n    & > button{\n        color:#000;\n        cursor:pointer;\n        margin:15px;\n        display:inline-block;\n        background:#519657;\n        padding:15px;\n        font-size:1.2em;\n        border:1px solid #000;\n    }\n`;\n","import React, { Component } from 'react';\nimport { Row, Col } from 'react-flexbox-grid';\nimport StarRatings from 'react-star-ratings';\n\nimport {\n    Comic,\n    ComicTitle,\n    ComicImage,\n    NewComic\n} from './Content.style';\n\nclass Content extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            rating: 0,\n            comic_data: null\n        };\n\n        this.changeRating = this.changeRating.bind(this);\n        this.getComic = this.getComic.bind(this);\n    }\n\n    componentDidMount() {\n        this.getComic();\n    }\n\n    getComic(){\n        let number = Math.floor(Math.random() * 1000) + 1\n\n        this.setState({\n            rating: 0,\n            comic_data: null\n        });\n\n        fetch('https://xkcd.now.sh/' + number, {\n            crossDomain:true,\n            type: 'GET',\n        }).then( response => response.json()).then(\n            data => this.setState({ \n                comic_data: data \n            })\n        );\n    }\n\n    changeRating(newRating, name) {\n        this.setState({\n            rating: newRating\n        });\n    }\n\n\n    render(){\n        return(\n            <div>\n                { this.state.comic_data ? (\n                    <Comic>\n                        <Col md={12}>\n                            <Row>\n                                <Col md={6}>\n                                    <ComicImage src={ this.state.comic_data.img }>\n                                    </ComicImage>\n                                </Col>\n                                <Col md={6}>\n                                    <Row>\n                                        <Col md={12}>\n                                            <ComicTitle>\n                                                { this.state.comic_data.title }\n                                            </ComicTitle>\n                                        </Col>\n                                        <Col md={12}>\n                                            <StarRatings\n                                                rating={ this.state.rating }\n                                                starRatedColor=\"yellow\"\n                                                changeRating={ this.changeRating }\n                                                numberOfStars={ 5 }\n                                                name='comic-rating'\n                                            />\n                                        </Col>\n                                    </Row>\n                                </Col>\n                                <Col md={12}>\n                                    <NewComic>\n                                        <button onClick={this.getComic}>\n                                            Load New\n                                        </button>\n                                    </NewComic>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Comic>\n                ) : (\n                    <Comic>\n                        <h1> Loading ... </h1>\n                    </Comic>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Content;\n","import styled from 'styled-components';\nimport { Row } from 'react-flexbox-grid';\n\nexport const FooterCredits = styled(Row)`\n    background:#509556;\n\n    & p{\n        padding:10px;\n        margin:0;\n        color: #fff;\n        font-size:1.8em;\n        font-family: 'Libre Barcode 128 Text', cursive;\n        text-align:right;\n        text-transform:uppercase;\n    }\n`;\n","import React, { Component } from 'react';\nimport { Col } from 'react-flexbox-grid';\n\nimport {\n    FooterCredits\n} from './Footer.style';\n\nclass Footer extends Component{\n    render(){\n        return(\n            <div>\n                <FooterCredits>\n                    <Col md={12}>\n                        <p>\n                            SanTiago Silva Cartagena.\n                        </p>\n                    </Col>\n                </FooterCredits>\n            </div>\n        );\n    }\n}\n\nexport default Footer;\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n    @import url('https://fonts.googleapis.com/css?family=Abel|Libre+Barcode+128+Text');\n\n    body{\n        font-family:'Abel', sans-serif;\n    }\n`;\n","import React, { Component } from 'react';\nimport { Grid } from 'react-flexbox-grid';\n\nimport Header from '../Header';\nimport Content from '../Content';\nimport Footer from '../Footer';\n\nimport { GlobalStyle } from './App.style';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <Grid fluid>\n                <Header/>\n                <Content/>\n                <Footer/>\n                <GlobalStyle/>\n            </Grid>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}